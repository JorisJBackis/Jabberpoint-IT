name: CI/CD Pipeline

permissions:
  contents: write # Allow action to write repository content (push commits)
  pull-requests: read # Keep default read for PR checks if needed

on:
  # Trigger ONLY on pushes to the development branch
  push:
    branches: [development]

  # Trigger on Pull Requests targeting the main branch
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened] # Trigger on PR creation and updates

jobs:
  # === Build, Test, and Analyze Job (Separate Steps) ===
  # This job runs on pushes to development AND on PRs targeting main
  build-and-test:
    runs-on: ubuntu-latest
    outputs: # Output needed for promotion jobs
      status: ${{ job.status }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Need history for merge/PR checks

      - name: Set up Java 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'maven' # Use Maven's caching mechanism

      # We need to compile first before running checks that need bytecode
      - name: Compile Code
        run: mvn clean compile test-compile # Compile main and test code

      # Run Checkstyle Separately
      - name: Lint with Checkstyle
        run: mvn checkstyle:check # Runs check goal directly

      # Run Unit Tests Separately
      - name: Run Unit Tests
        run: mvn test # Runs only the test goal (relies on previous compile)

      # Run SpotBugs Separately
      # Note: spotbugs:check usually runs spotbugs:spotbugs first
      # If 'check' is bound to 'verify' in pom.xml executions, 'mvn verify' includes it.
      # Running directly might require 'mvn spotbugs:spotbugs spotbugs:check' or just 'spotbugs:check'
      # if the pom execution for 'check' handles running the analysis. Let's assume check is sufficient.
      - name: Run SpotBugs
        run: mvn spotbugs:check

      # Upload reports regardless of success/failure of specific steps
      - name: Upload test report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-report # Simplified name
          path: target/surefire-reports/
          if-no-files-found: warn # Don't fail if tests didn't run/produce reports

      - name: Upload SpotBugs report
        if: always() # Upload even if spotbugs found errors but didn't fail job yet
        uses: actions/upload-artifact@v4
        with:
          name: spotbugs-report
          # Default SpotBugs XML report location:
          path: target/spotbugsXml.xml
          if-no-files-found: warn

  # === Job: Promote Development to Test ===
  # Runs ONLY after a successful build-and-test triggered by a push to development
  promote-dev-to-test:
    runs-on: ubuntu-latest
    needs: build-and-test
    # Condition: Must be a push to development AND build-and-test succeeded
    if: github.event_name == 'push' && github.ref == 'refs/heads/development' && needs.build-and-test.outputs.status == 'success'

    steps:
      - name: Checkout code (Development)
        uses: actions/checkout@v4
        with:
          ref: 'development' # Explicitly checkout development
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }} # Token needed to push back

      - name: Configure Git User
        run: |
          git config user.name "GitHub Actions Bot (Dev->Test)"
          git config user.email "actions@github.com"

      - name: Merge Development into Test and Push
        run: |
          git fetch origin test:test # Ensure local test branch exists and is up-to-date
          git checkout test
          echo "Attempting merge from development commit ${{ github.sha }} into test..."
          # Merge the specific commit that triggered the workflow from development
          git merge ${{ github.sha }} --no-ff -m "Auto-merge dev commit ${{ github.sha }} to test [CI Skip]" || exit 1
          echo "Pushing updated test branch..."
          git push origin test

  # === Job: Promote Test to Acceptance ===
  # Runs ONLY after a successful build-and-test triggered by a push to test
  # (which itself was triggered by the previous job)
  promote-test-to-acceptance:
    runs-on: ubuntu-latest
    needs:
      - build-and-test
      - promote-dev-to-test
    if: needs.promote-dev-to-test.result == 'success'


    steps:
      - name: Checkout code (Test)
        uses: actions/checkout@v4
        with:
          ref: 'test' # Explicitly checkout test.
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git User
        run: |
          git config user.name "GitHub Actions Bot (Test->Acc)"
          git config user.email "actions@github.com"

      - name: Merge Test into Acceptance and Push
        run: |
          git fetch origin acceptance:acceptance
          git checkout acceptance
          echo "Attempting merge from test commit ${{ github.sha }} into acceptance..."
          # Merge the specific commit that triggered the workflow from test
          git merge ${{ github.sha }} --no-ff -m "Auto-merge test commit ${{ github.sha }} to acceptance [CI Skip]" || exit 1
          echo "Pushing updated acceptance branch..."
          git push origin acceptance