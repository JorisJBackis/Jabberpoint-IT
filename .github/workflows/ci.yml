name: CI/CD Pipeline

on:
  # Trigger ONLY on pushes to the development branch
  push:
    branches: [development]

  # Trigger on Pull Requests targeting the main branch
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened] # Trigger on PR creation and updates

jobs:
  # === Build, Test, and Analyze Job ===
  # This job runs on pushes to development AND on PRs targeting main
  build-and-test:
    runs-on: ubuntu-latest
    outputs:
      status: ${{ job.status }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Need history for merge/PR checks

      - name: Set up Java 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'maven'

      - name: Run checks and tests (Verify Phase)
        run: mvn clean verify # Runs compile, test, checkstyle, spotbugs

      - name: Upload test report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-report-${{ github.ref_name }} # Branch name might be less relevant now
          path: target/surefire-reports/
          if-no-files-found: warn

  # === Job: Promote Development to Test ===
  # Runs ONLY after a successful build-and-test triggered by a push to development
  promote-dev-to-test:
    runs-on: ubuntu-latest
    needs: build-and-test
    # Condition: Must be a push to development AND build-and-test succeeded
    if: github.event_name == 'push' && github.ref == 'refs/heads/development' && needs.build-and-test.outputs.status == 'success'

    steps:
      - name: Checkout code (Development)
        uses: actions/checkout@v4
        with:
          ref: 'development' # Explicitly checkout development
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git User
        run: |
          git config user.name "GitHub Actions Bot (Dev->Test)"
          git config user.email "actions@github.com"

      - name: Merge Development into Test and Push
        run: |
          git fetch origin test:test # Ensure local test branch exists and is up-to-date
          git checkout test
          echo "Attempting merge from development into test..."
          # Merge the specific commit that triggered the workflow from development
          git merge ${{ github.sha }} --no-ff -m "Auto-merge dev commit ${{ github.sha }} to test [CI Skip]" || exit 1
          echo "Pushing updated test branch..."
          git push origin test

  # === Job: Promote Test to Acceptance ===
  # Runs ONLY after a successful build-and-test triggered by a push to test
  # (which itself was triggered by the previous job)
  promote-test-to-acceptance:
    runs-on: ubuntu-latest
    needs: build-and-test
    # Condition: Must be a push to test AND build-and-test succeeded
    # NOTE: This job relies on the previous job pushing to 'test' to trigger a new workflow run
    # where github.ref will be 'refs/heads/test'.
    if: github.event_name == 'push' && github.ref == 'refs/heads/test' && needs.build-and-test.outputs.status == 'success'

    steps:
      - name: Checkout code (Test)
        uses: actions/checkout@v4
        with:
          ref: 'test' # Explicitly checkout test
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git User
        run: |
          git config user.name "GitHub Actions Bot (Test->Acc)"
          git config user.email "actions@github.com"

      - name: Merge Test into Acceptance and Push
        run: |
          git fetch origin acceptance:acceptance
          git checkout acceptance
          echo "Attempting merge from test into acceptance..."
          # Merge the specific commit that triggered the workflow from test
          git merge ${{ github.sha }} --no-ff -m "Auto-merge test commit ${{ github.sha }} to acceptance [CI Skip]" || exit 1
          echo "Pushing updated acceptance branch..."
          git push origin acceptance